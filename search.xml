<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[蛮力法]]></title>
    <url>%2F2017%2F09%2F21%2Fbruteforce%2F</url>
    <content type="text"><![CDATA[算法设计策略 – 蛮力法一种简单直接地解决问题的方法，常常直接基于问题的描述和所涉及的概念定义。 选择排序和冒泡排序选择排序基本原理 扫描整个列表，找到最小元素，将其和第一个元素进行交换，此时最小元素在有序表中的最终位置上； 从第二元素开始扫描列表，找到最后n-1个元素中的最小元素，再和第二个元素交换位置； 之后，在对该列表做第i遍扫描时(i值为0~n-2)，在最后n-i个元素中寻找最小元素，然后将之和 Ai 交换； 在经过n-1遍后，列表已序。 示例：1234567| 89 45 68 90 29 34 17 17 | 45 68 90 29 34 89 17 29 | 68 90 45 34 89 17 29 34 | 90 45 68 89 17 29 34 45 | 90 68 89 17 29 34 45 68 | 90 89 17 29 34 45 68 89 | 90 代码实现伪代码： 12345678910算法 SelectionSort(A[0..n-1]) //该算法用选择排序对给定列表排序 //输入: 一个可排序数组 A[0..n-1] //输出: 升序排列的数组 A[0..n-1] for i = 0 to n - 2 do min = i for j = i + 1 to n - 1 do if A[j] &lt; A[min] min = j swap A[i] and A[min] python实现： 1234567891011def SelectionSort(A): #选择排序 对给定列表排序(升序) #输入: 待排序列表 A[0..n-1] list #输出: 已排序列表 A[0..n-1] list lenA = len(A) for i in range(lenA-1): minValIndex = i for j in range(i+1, lenA): if A[minValIndex] &gt; A[j]: minValIndex = j A[i], A[minValIndex] = A[minValIndex], A[i] 算法分析输入规模由列表中元素的个数n决定，基本操作是 键值比较 A[j] &lt; A[min] ，因此该比较的执行次数由以下求和公式给出： 因此，对于任何输入来说，选择排序都是一个 的算法。键的交换次数仅为 冒泡排序基本原理 从第一个元素开始，依次比较相邻元素值，即第一个元素和第二个元素比较，若逆序，则交换位置； 第二个元素和第三个元素比较，若逆序，交换位置； 依次下去，则将最大元素移动到了最右端（“沉到最底部”）； 再次从列表头开始依次比较相邻数，重复多次后，第二大的数已移到最右第二个位置上； 多次比较后，列表已序。 示例：1234567891011121314151689 &lt;?&gt; 45 68 90 29 34 1745 89 &lt;?&gt; 68 90 29 34 1745 68 89 &lt;?&gt; 90 29 34 1745 68 89 90 &lt;?&gt; 29 34 1745 68 89 29 90 &lt;?&gt; 34 1745 68 89 29 34 90 &lt;?&gt; 1745 68 89 29 34 17 |9045 &lt;?&gt; 68 89 29 34 17 |9045 68 &lt;?&gt; 89 29 34 17 |9045 68 89 &lt;?&gt; 29 34 17 |9045 68 29 89 &lt;?&gt; 34 17 |9045 68 29 34 89 &lt;?&gt; 17 |9045 68 29 34 17 |89 90etc. 代码实现伪代码：12345678算法 BubbleSort(A[0..n-1]) //该算法用冒泡排序对数组A[0..n-1]进行排序 //输入：一个可排序数组A[0..n-1] //输出：非降序排列的数组A[0..n-1] for i = 0 to n - 2 do for j = 0 to n - 2 - i do if A[j+1] &lt; A[j] swap A[j] and A[j+1] python实现123456789def BubbleSort(A): #冒泡排序 对给定列表排序(升序) #输入: 待排序列表 A[0..n-1] list #输出: 已排序列表 A[0..n-1] list lenA = len(A) for i in range(lenA-1): for j in range(lenA-1-i): if A[j+1] &lt; A[j]: A[j], A[j+1] = A[j+1], A[j] 算法分析]]></content>
      <categories>
        <category>Algorithm Design</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用GitHub+NodeJs+Hexo+NexT搭建个人博客(1)]]></title>
    <url>%2F2017%2F09%2F18%2Fhexo-next-blog-1%2F</url>
    <content type="text"><![CDATA[GitHub 账号注册&emsp;&emsp;因为此文所搭建的个人博客是基于GitHub平台服务的，所以首先是注册GitHub，当然已有账号的跳过此步；&emsp;&emsp;传送门：GitHub官网，页面如下，输入username、email、password后点击Sign Up注册，当然这些之后是需要去对应的邮箱邮件里进行注册激活。&emsp;&emsp;页面跳转至如下，这边我们是点击Continue，默认里面其他设置。&emsp;&emsp;页面如下，根据问题勾选自己对应的。 创建Repository&emsp;&emsp;基本配置完成后，跳转至如下，这边我们就直接Start a project了，你也可以选择先看下guide，&emsp;&emsp;点击开始后，跳转至Create a new repository，这边Repository name命名规则就是username.github.io，其中username就是你注册时的username。 Settings&emsp;&emsp;点击创建之后页面跳转至project内，这时我们点击settings&emsp;&emsp;这边就是setting下&emsp;&emsp;这时我们在该页面往下拖动网页，找到GitHub Pages，之后点击Choose a theme选择页面主题，这边我们就暂时选择默认的主题（因为后面我会更换为NexT主题的），然后点击Select theme。 GitHub Page&emsp;&emsp;点击选择主题后，页面会跳转至该Repository的可以说是主页吧，如下所示。上面有提醒主题更换，也有生成一个index.mdmarkdown文件。这时我们再去刚才的setting设置里去看刚刚的GitHub Pages那边，会有显示你的url，这就是你未来博客“搭建”在该网址上。&emsp;&emsp;此时点击该url访问到的也就是你未来个人博客将会展示的样子 NodeJs下载安装&emsp;&emsp;传送门：NodeJs，选择对应的版本进行下载，安装的话就点点点，这边就不在叙述了。&emsp;&emsp;软件安装完成后，打开cmd界面，输入node -v和npm -v（注意查看环境变量部分是否已经正确），查验其版本，确认是否安装成功。 Git下载安装&emsp;&emsp;传送门：git，选择对应版本下载安装。安装过程这边也不叙述了，就点点点。&emsp;&emsp;安装完成后，看下版本git --version 未完待续~]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>NodeJs</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博文]]></title>
    <url>%2F2017%2F09%2F16%2Ffirstblog%2F</url>
    <content type="text"><![CDATA[因为感觉能有一个自己独立的博客网站，能够在上面写写东西，能够把自己学到的给记录下来，这绝对是一件很cool的事，所以就有了这个博客网站，嘿嘿。因此自己特地花上两三天时间，终于把一个能够搬上台面的博客网站给整出来了。当然，目前网站里也只是完成了一些基本功能的整合，还有许多常用的功能尚未组装进来，所以后续的会继续进行完善。 写这个博文，第一是想庆祝下，自己这几天的忙绿终有结果，看着还不错 &gt;_&lt;第二就是想提醒下自己，在以后的学习成长过程中最好能够把所看到的、所学到的内容整理出来，方便理清思路及以后的回顾，搭建这个博客的初衷也就是这；最后，希望自己能够稳步前行。恩，over！]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Thought</tag>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
